import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
import os

# --- –•—Ä–∞–Ω–∏ —Ç–æ–∫–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
BOT_TOKEN = os.getenv("BOT_TOKEN", "8389234141:AAHm35p7eaKP1Riub6LQq6MF_bryzN4Xxys")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
user_data = {}

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


# --- –º–µ–Ω—é —Å —Å—Å—ã–ª–∫–æ–π ---
async def send_main_menu(update_or_query, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    link = f"https://t.me/{context.bot.username}?start={user_id}"
    keyboard = [
        [InlineKeyboardButton("üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π", url=f"https://t.me/share/url?url={link}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    text = (
        f"–ù–∞—á–Ω–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!\n\n"
        f"üëâ {link}\n\n"
        f"–†–∞–∑–º–µ—Å—Ç–∏—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É ‚òùÔ∏è –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è Telegram, TikTok, Instagram (stories), "
        f"—á—Ç–æ–±—ã –≤–∞–º –º–æ–≥–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å üí¨"
    )

    if isinstance(update_or_query, Update) and update_or_query.message:
        await update_or_query.message.reply_text(text, reply_markup=reply_markup)
    else:
        await update_or_query.edit_message_text(text, reply_markup=reply_markup)


# --- /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data.setdefault(user_id, {"received": 0, "sent": 0, "users": set()})

    # –ï—Å–ª–∏ –ø—Ä–∏—à–ª–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
    if context.args:
        target_id = int(context.args[0])
        sender_id = update.effective_user.id

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        user_data.setdefault(sender_id, {"received": 0, "sent": 0, "users": set()})
        user_data[sender_id]["sent"] += 1
        user_data[sender_id]["users"].add(target_id)

        keyboard = [
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            "üöÄ –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫—É, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª —ç—Ç—É —Å—Å—ã–ª–∫—É\n\n"
            "üñä –ù–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞ –≤—Å—ë, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –µ–º—É –ø–µ—Ä–µ–¥–∞—Ç—å, –∏ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –æ–Ω –ø–æ–ª—É—á–∏—Ç –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, "
            "–Ω–æ –Ω–µ –±—É–¥–µ—Ç –∑–Ω–∞—Ç—å –æ—Ç –∫–æ–≥–æ\n\n"
            "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–∂–Ω–æ:\n"
            "üì∏ —Ñ–æ—Ç–æ, üé• –≤–∏–¥–µ–æ, üí¨ —Ç–µ–∫—Å—Ç, üîä –≥–æ–ª–æ—Å–æ–≤—ã–µ, üì∑ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è (–∫—Ä—É–∂–∫–∏), ‚ú® —Å—Ç–∏–∫–µ—Ä—ã",
            reply_markup=reply_markup
        )

        context.user_data["reply_to"] = target_id
    else:
        await send_main_menu(update, context, user_id)


# --- –∫–Ω–æ–ø–∫–∏ ---
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "cancel":
        user_id = query.from_user.id
        await send_main_menu(query, context, user_id)


# --- –ø–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def forward_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_to = context.user_data.get("reply_to")

    if reply_to:
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
        await context.bot.send_message(chat_id=reply_to, text="üì© –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
        # –°–∞–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.copy(chat_id=reply_to)

        user_data.setdefault(reply_to, {"received": 0, "sent": 0, "users": set()})
        user_data[reply_to]["received"] += 1
        context.user_data["reply_to"] = None

        await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω–æ!")
    else:
        user_id = update.effective_user.id
        await send_main_menu(update, context, user_id)


# --- —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    stats = user_data.get(user_id, {"received": 0, "sent": 0, "users": set()})
    await update.message.reply_text(
        f"üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–≥–æ: {stats['received']}\n"
        f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['sent']}\n"
        f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π: {len(stats['users'])}"
    )


def main():
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CallbackQueryHandler(button_callback))
    app.add_handler(MessageHandler(filters.ALL, forward_message))

    app.run_polling()


if __name__ == "__main__":
    main()
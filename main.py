import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

# --- –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω ---
BOT_TOKEN = "8389234141:AAHm35p7eaKP1Riub6LQq6MF_bryzN4Xxys"

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
user_data = {}

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data.setdefault(user_id, {"received": 0, "sent": 0, "users": set()})
    await update.message.reply_text(
        "üëãüèº –ü—Ä–∏–≤–µ—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º, —á—Ç–æ–±—ã –æ–Ω–∏ –º–æ–≥–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–±–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n"
        f"https://t.me/{context.bot.username}?start={user_id}"
    )


async def handle_start_param(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —á—É–∂–æ–π —Å—Å—ã–ª–∫–µ"""
    args = context.args
    if not args:
        await start(update, context)
        return

    target_id = int(args[0])
    sender_id = update.effective_user.id

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    user_data.setdefault(sender_id, {"received": 0, "sent": 0, "users": set()})
    user_data[sender_id]["sent"] += 1
    user_data[sender_id]["users"].add(target_id)

    keyboard = [[InlineKeyboardButton("‚úçÔ∏è –ß—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç—ã–∫–Ω–∏ —Ç—É—Ç", callback_data=f"reply_{target_id}")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–ü–æ–≥–Ω–∞–ª–∏ üëá",
        reply_markup=reply_markup
    )


async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–Ω–æ–ø–∫–∞ ¬´–û—Ç–≤–µ—Ç–∏—Ç—å¬ª"""
    query = update.callback_query
    await query.answer()

    if query.data.startswith("reply_"):
        target_id = int(query.data.split("_")[1])
        context.user_data["reply_to"] = target_id
        await query.edit_message_text("‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–Ω–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω–æ, —Ç–∞–∫ –∂–µ –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –≥–æ–ª–æ—Å–æ–≤–æ–µ, –∏–ª–∏ –∫—Ä—É–∂–æ–∫.")


async def forward_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ—Å—ã–ª–∫–∞ –ª—é–±—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    sender_id = update.effective_user.id
    reply_to = context.user_data.get("reply_to")

    if reply_to:
        await update.message.copy(chat_id=reply_to)
        user_data.setdefault(reply_to, {"received": 0, "sent": 0, "users": set()})
        user_data[reply_to]["received"] += 1
        context.user_data["reply_to"] = None
        await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω–æ!")
    else:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ—é —Å—Å—ã–ª–∫—É.")


async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    stats = user_data.get(user_id, {"received": 0, "sent": 0, "users": set()})
    await update.message.reply_text(
        f"üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–≥–æ: {stats['received']}\n"
        f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['sent']}\n"
        f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π: {len(stats['users'])}"
    )


def main():
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", handle_start_param))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CallbackQueryHandler(button_callback))
    app.add_handler(MessageHandler(filters.ALL, forward_message))

    app.run_polling()


if __name__ == "__main__":
    main()